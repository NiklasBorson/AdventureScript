delegate ItemDelegate($item:Item);
delegate Item2Delegate($item1:Item, $item2:Item);
delegate ItemPredicate($item:Item) : Bool;
delegate NavigationAction($from:Item, $to:Item) : Bool;
enum Direction(North,South,East,West,Up,Down);
enum DoorState(None,Open,Closed,Locked);
enum LightState(None,Off,On,Unlit,Lit);
property Location: Item;
property Noun: String;
property Adjectives: String;
property Health: Int;
property MaxHealth: Int;
property WeaponDamage: Int;
property TakeAction: ItemDelegate;
property DropAction: ItemDelegate;
property UseAction: ItemDelegate;
property UseOnAction: Item2Delegate;
property OpenAction: ItemDelegate;
property CloseAction: ItemDelegate;
property DescribeAction: ItemDelegate;
property DescribeHealthAction: ItemDelegate;
property DestroyAction: ItemDelegate;
property TurnOnAction: ItemDelegate;
property TurnOffAction: ItemDelegate;
property IgniteAction: ItemDelegate;
property PutOutAction: ItemDelegate;
property LeaveAction: NavigationAction;
property EnterAction: NavigationAction;
property Description: String;
property LinkN: Item;
property LinkS: Item;
property LinkE: Item;
property LinkW: Item;
property LinkU: Item;
property LinkD: Item;
property DoorState: DoorState;
property Key: Item;
property IsHidden: Bool;
property IsDark: ItemPredicate;
property LightState: LightState;
item player;
item frontPorch;
item frontHall;
item backHall;
item laundryRoom;
item kitchen;
item diningRoom;
item livingRoom;
item _door_frontPorchfrontHall;
item _opening_frontHallbackHall;
item _door_backHalllaundryRoom;
item _opening_backHallkitchen;
item _opening_kitchendiningRoom;
item _opening_diningRoomlivingRoom;
item _opening_livingRoomfrontHall;
item _key_laundryRoom;
var $currentLightSource : Item;
var $isNowDark : Bool;
var $currentTime = 662;
map DirectionPhrase Direction -> String
{
    North -> "to the North",
    South -> "to the South",
    East -> "to the East",
    West -> "to the West",
    Up -> "leading upward",
    Down -> "leading downward"
}
function Label($item:Item) => $"{$item.Adjectives} {$item.Noun}";
map LightStateAdj LightState -> String
{
    None -> "",
    Off -> "off",
    On -> "on",
    Unlit -> "unlit",
    Lit -> "lit"
}
map DoorStateAdj DoorState -> String
{
    None -> "",
    Open -> "open",
    Closed -> "closed",
    Locked -> "closed"
}
function AddStateQualifier($item:Item, $phrase:String) => $item.Health < 0 ? $"broken {$phrase}" : $item.DoorState != DoorState.None ? $"{DoorStateAdj($item.DoorState)} {$phrase}" : $item.LightState != LightState.None ? $"{$phrase}, which is {LightStateAdj($item.LightState)}" : $phrase;
function LabelWithState($item:Item) => AddStateQualifier($item, Label($item));
function SetLabelProperties($item:Item, $adjectives:String, $noun:String)
{
    $item.Adjectives = $adjectives;
    $item.Noun = $noun;
}
function InvokeItemAction($func:ItemDelegate, $item:Item, $verb:String)
{
    if ($func != null)
    {
        $func($item);
    }
    else
    {
        Message($"You cannot {$verb} the {Label($item)}.");
    }
}
function InvokeItemActionWithFallback($func:ItemDelegate, $item:Item, $fallback:ItemDelegate)
{
    if ($func != null)
    {
        $func($item);
    }
    else
    {
        $fallback($item);
    }
}
function InvokeItem2Action($func:Item2Delegate, $item1:Item, $item2:Item, $verb:String)
{
    if ($func != null)
    {
        $func($item1, $item2);
    }
    else
    {
        Message($"You cannot {$verb} the {Label($item1)}.");
    }
}
function SetHealth($item:Item, $health:Int, $maxHealth:Int)
{
    $item.Health = $health;
    $item.MaxHealth = $maxHealth;
}
function DescribeHealthCommon($item:Item)
{
    if ($item.MaxHealth != 0)
    {
        var $health = $item.Health;
        var $percentage = $health * 100 / $item.MaxHealth;
        if ($health < 0)
        {
        }
        elseif ($percentage < 20)
        {
            Message($"The {Label($item)} is critically damanged.");
        }
        elseif ($percentage < 40)
        {
            Message($"The {Label($item)} is severely damanged.");
        }
        elseif ($percentage < 60)
        {
            Message($"The {Label($item)} is significantly damanged.");
        }
        elseif ($percentage < 80)
        {
            Message($"The {Label($item)} is slightly damaged.");
        }
    }
}
function DestroyCommon($item:Item)
{
    $item.Description = $"The {Label($item)} is destroyed!";
    Message($item.Description);
    foreach (var $inner) where Location == $item
    {
        $inner.Location = $item.Location;
    }
    $item.TakeAction = null;
    $item.DropAction = null;
    $item.UseAction = null;
    $item.OpenAction = null;
    $item.CloseAction = null;
    $item.DescribeAction = null;
    $item.DescribeHealthAction = null;
    $item.DestroyAction = null;
    $item.TurnOnAction = null;
    $item.TurnOffAction = null;
    $item.IgniteAction = null;
    $item.PutOutAction = null;
    $item.DoorState = DoorState.None;
    $item.LightState = LightState.None;
}
function DescribePlayerHealth($item:Item)
{
    if ($item.MaxHealth != 0)
    {
        var $health = $item.Health;
        var $percentage = $health * 100 / $item.MaxHealth;
        if ($health < 0)
        {
            Message("You are dead.");
        }
        elseif ($percentage < 20)
        {
            Message("You are critically injured.");
        }
        elseif ($percentage < 40)
        {
            Message("You are severaly injured.");
        }
        elseif ($percentage < 60)
        {
            Message("You are significantly injured.");
        }
        elseif ($percentage < 80)
        {
            Message("You are slightly injured.");
        }
    }
}
function DestroyPlayer($item:Item)
{
    Message("You have sustained fatal injuries. The game is over. Better luck next time!");
    EndGame(false);
}
function DescribeHealth($item:Item) => InvokeItemActionWithFallback($item.DescribeHealthAction, $item, DescribeHealthCommon);
function Destroy($item:Item) => InvokeItemActionWithFallback($item.DestroyAction, $item, DestroyCommon);
function DescribeCommon($item:Item)
{
    if ($item.Description != null)
    {
        Message($item.Description);
        if ($item.DoorState != null && $item.Noun != null)
        {
            Message($"The {Label($item)} is {DoorStateAdj($item.DoorState)}.");
        }
    }
    elseif ($item.Noun != null)
    {
        Message($"You see a {LabelWithState($item)}.");
    }
    DescribeHealth($item);
}
function TakePortableItem($item:Item)
{
    if ($item.Location != player)
    {
        $item.Location = player;
        Message($"The {Label($item)} is now in your inventory.");
    }
    else
    {
        Message($"The {Label($item)} is already in your inventory.");
    }
}
function DropPortableItem($item:Item)
{
    if ($item.Location == player)
    {
        $item.Location = player.Location;
        Message($"You've dropped the {Label($item)}.");
    }
    else
    {
        Message($"The {Label($item)} is not in your inventory.");
    }
}
function SetPortable($item:Item)
{
    $item.TakeAction = TakePortableItem;
    $item.DropAction = DropPortableItem;
}
function IsPortable($item:Item) => $item.TakeAction == TakePortableItem;
function Inventory()
{
    var $haveItems = false;
    foreach (var $item) where Location == player
    {
        if (!$haveItems)
        {
            Message("You have the following items:");
            $haveItems = true;
        }
        Message($"- A {LabelWithState($item)}.");
    }
    if (!$haveItems)
    {
        Message("There is nothing in your inventory.");
    }
}
function Take($item:Item) => InvokeItemAction($item.TakeAction, $item, "take");
function Drop($item:Item) => InvokeItemAction($item.DropAction, $item, "drop");
function Use($item:Item) => InvokeItemAction($item.UseAction, $item, "use");
function UseOn($item:Item, $target:Item) => InvokeItem2Action($item.UseOnAction, $item, $target, "use");
function Open($item:Item) => InvokeItemAction($item.OpenAction, $item, "open");
function Close($item:Item) => InvokeItemAction($item.CloseAction, $item, "close");
function TurnOn($item:Item) => InvokeItemAction($item.TurnOnAction, $item, "turn on");
function TurnOff($item:Item) => InvokeItemAction($item.TurnOffAction, $item, "turn off");
function PutOut($item:Item) => InvokeItemAction($item.PutOutAction, $item, "put out");
function Describe($item:Item) => InvokeItemActionWithFallback($item.DescribeAction, $item, DescribeCommon);
map IsClosedOrLocked DoorState -> Bool
{
    None -> false,
    Open -> false,
    Closed -> true,
    Locked -> true
}
function OpenDoor($item:Item)
{
    switch ($item.DoorState)
    {
        case DoorState.None
        {
            Message("You can't open that.");
        }
        case DoorState.Open
        {
            Message($"The {Label($item)} is already open.");
        }
        case DoorState.Closed
        {
            $item.DoorState = DoorState.Open;
            Message($"The {Label($item)} is now open.");
        }
        case DoorState.Locked
        {
            Message($"The {Label($item)} is locked.");
        }
    }
}
function CloseDoor($item:Item)
{
    switch ($item.DoorState)
    {
        case DoorState.None
        {
            Message("You can't open that.");
        }
        case DoorState.Open
        {
            $item.DoorState = DoorState.Open;
            Message($"The {Label($item)} is now closed.");
        }
        case DoorState.Closed
        {
            Message($"The {Label($item)} is already closed.");
        }
        case DoorState.Locked
        {
            Message($"The {Label($item)} is already closed.");
        }
    }
}
function IsOpenable($item:Item) => $item.OpenAction != null;
function ListContents($container:Item)
{
    var $haveItems = false;
    foreach (var $item) where Location == $container
    {
        if (!$haveItems)
        {
            Message($"Inside the {$container.Noun} are the following:");
            $haveItems = true;
        }
        Message($" - A {LabelWithState($item)}.");
    }
    if (!$haveItems)
    {
        Message($"The {$container.Noun} is empty.");
    }
}
function OpenContainer($item:Item)
{
    switch ($item.DoorState)
    {
        case DoorState.None
        {
            Message("You can't open that.");
        }
        case DoorState.Open
        {
            Message($"The {Label($item)} is already open.");
        }
        case DoorState.Closed
        {
            $item.DoorState = DoorState.Open;
            Message($"The {Label($item)} is now open.");
            ListContents($item);
        }
        case DoorState.Locked
        {
            Message($"The {Label($item)} is locked.");
        }
    }
}
function DescribeContainer($container:Item)
{
    DescribeCommon($container);
    if (!IsClosedOrLocked($container.DoorState))
    {
        ListContents($container);
    }
}
function InitializeContainer($container:Item, $adjectives:String, $noun:String, $state:DoorState, $loc:Item)
{
    SetLabelProperties($container, $adjectives, $noun);
    $container.DoorState = $state;
    $container.OpenAction = OpenContainer;
    $container.CloseAction = CloseDoor;
    $container.DescribeAction = DescribeContainer;
    $container.Location = $loc;
}
function NewContainer($adjectives:String, $noun:String, $state:DoorState, $loc:Item) : Item
{
    var $container = NewItem($"_{$noun}_{$loc}");
    InitializeContainer($container, $adjectives, $noun, $state, $loc);
    $return = $container;
}
function IsContainer($item:Item) => $item.DescribeAction == DescribeContainer;
function IsOpenContainer($item:Item) => IsContainer($item) && !IsClosedOrLocked($item.DoorState);
function PutInContainer($item:Item, $container:Item)
{
    if (!IsPortable($item))
    {
        Message($"You can't move the {Label($item)}.");
    }
    elseif (!IsContainer($container))
    {
        Message($"The {Label($container)} is not a container.");
    }
    elseif (IsClosedOrLocked($container.DoorState))
    {
        Message($"The {Label($container)} is closed.");
    }
    elseif ($item.Location == $container)
    {
        Message($"The {Label($item)} is already in the {Label($container)}.");
    }
    else
    {
        $item.Location = $container;
        Message($"The {Label($item)} is now in the {Label($container)}.");
    }
}
map Opposite Direction -> Direction
{
    North -> South,
    South -> North,
    East -> West,
    West -> East,
    Up -> Down,
    Down -> Up
}
function GetLink($item:Item, $dir:Direction) : Item
{
    switch ($dir)
    {
        case Direction.North
        {
            $return = $item.LinkN;
        }
        case Direction.South
        {
            $return = $item.LinkS;
        }
        case Direction.East
        {
            $return = $item.LinkE;
        }
        case Direction.West
        {
            $return = $item.LinkW;
        }
        case Direction.Up
        {
            $return = $item.LinkU;
        }
        case Direction.Down
        {
            $return = $item.LinkD;
        }
    }
}
function SetLink($from:Item, $to:Item, $dir:Direction)
{
    switch ($dir)
    {
        case Direction.North
        {
            $from.LinkN = $to;
        }
        case Direction.South
        {
            $from.LinkS = $to;
        }
        case Direction.East
        {
            $from.LinkE = $to;
        }
        case Direction.West
        {
            $from.LinkW = $to;
        }
        case Direction.Up
        {
            $from.LinkU = $to;
        }
        case Direction.Down
        {
            $from.LinkD = $to;
        }
    }
}
function InitializeDoor($door:Item, $adjectives:String, $noun:String, $state:DoorState)
{
    SetLabelProperties($door, $adjectives, $noun);
    $door.DoorState = $state;
    if ($state != DoorState.None)
    {
        $door.OpenAction = OpenDoor;
        $door.CloseAction = CloseDoor;
    }
}
function LinkRoomsOneWay($from:Item, $to:Item, $via:Item, $dir:Direction)
{
    SetLink($from, $via, $dir);
    SetLink($via, $to, $dir);
}
function LinkRooms($from:Item, $to:Item, $via:Item, $dir:Direction)
{
    LinkRoomsOneWay($from, $to, $via, $dir);
    LinkRoomsOneWay($to, $from, $via, Opposite($dir));
}
function NewDoorItem($from:Item, $to:Item, $dir:Direction, $adjectives:String, $noun:String, $state:DoorState) : Item
{
    var $door = NewItem($"_{$noun}_{$from}{$to}");
    InitializeDoor($door, $adjectives, $noun, $state);
    LinkRooms($from, $to, $door, $dir);
    $return = $door;
}
function NewClosedDoor($from:Item, $to:Item, $dir:Direction) : Item
{
    $return = NewDoorItem($from, $to, $dir, "", "door", DoorState.Closed);
}
function NewOpening($from:Item, $to:Item, $dir:Direction) : Item
{
    $return = NewDoorItem($from, $to, $dir, "", "opening", DoorState.None);
}
function UseKeyOn($key:Item, $target:Item)
{
    if ($target.Key == $key && $target.DoorState != DoorState.None)
    {
        if ($target.DoorState == DoorState.Locked)
        {
            $target.DoorState = DoorState.Closed;
            Message($"The {Label($target)} is now unlocked.");
        }
        else
        {
            $target.DoorState = DoorState.Locked;
            Message($"The {Label($target)} is now locked.");
        }
    }
    else
    {
        Message($"The {Label($key)} doesn't work on that.");
    }
}
function InitializeKey($key:Item, $adjectives:String, $noun:String, $loc:Item)
{
    SetLabelProperties($key, $adjectives, $noun);
    SetPortable($key);
    $key.UseOnAction = UseKeyOn;
    $key.Location = $loc;
}
function NewKey($adjectives:String, $noun:String, $loc:Item) : Item
{
    var $key = NewItem($"_{$noun}_{$loc}");
    InitializeKey($key, $adjectives, $noun, $loc);
    $return = $key;
}
function IsKey($item:Item) => $item.UseOnAction == UseKeyOn;
function InflictDamage($target:Item, $damage:Int)
{
    if ($target.Health < 0)
    {
        Message($"The {Label($target)} is already destroyed.");
    }
    elseif ($target.MaxHealth != 0 && $damage != 0)
    {
        $target.Health = $target.Health - $damage;
        if ($target.Health >= 0)
        {
            Message($"The {Label($target)} takes some damage.");
            DescribeHealth($target);
        }
        else
        {
            Destroy($target);
        }
    }
    else
    {
        Message("That has no effect.");
    }
}
function UseWeaponOn($item:Item, $target:Item)
{
    InflictDamage($target, $item.WeaponDamage);
}
function InitializeWeapon($item:Item, $adjectives:String, $noun:String, $damage:Int, $loc:Item)
{
    SetLabelProperties($item, $adjectives, $noun);
    SetPortable($item);
    $item.UseOnAction = UseWeaponOn;
    $item.WeaponDamage = $damage;
    $item.Location = $loc;
}
function NewWeapon($adjectives:String, $noun:String, $damage:Int, $loc:Item) : Item
{
    var $item = NewItem($"_{$noun}_{$loc}");
    InitializeWeapon($item, $adjectives, $noun, $damage, $loc);
    $return = $item;
}
function TurnOnLight($item:Item)
{
    if ($item.LightState != LightState.On)
    {
        $item.LightState = LightState.On;
        Message($"The {Label($item)} is now on.");
    }
    else
    {
        Message($"The {Label($item)} is already on.");
    }
}
function TurnOffLight($item:Item)
{
    if ($item.LightState == LightState.On)
    {
        $item.LightState = LightState.Off;
        Message($"The {Label($item)} is now off.");
    }
    else
    {
        Message($"The {Label($item)} is already off.");
    }
}
function InitializeLight($item:Item, $adjectives:String, $noun:String, $loc:Item)
{
    SetLabelProperties($item, $adjectives, $noun);
    SetPortable($item);
    $item.LightState = LightState.Off;
    $item.TurnOnAction = TurnOnLight;
    $item.TurnOffAction = TurnOffLight;
    $item.PutOutAction = TurnOffLight;
    $item.Location = $loc;
}
function NewLight($adjectives:String, $noun:String, $loc:Item) : Item
{
    var $item = NewItem($"_{$noun}_{$loc}");
    InitializeLight($item, $adjectives, $noun, $loc);
    $return = $item;
}
function IsLight($item:Item) => $item.TurnOnAction == TurnOnLight;
function TurnOnCandle($item:Item)
{
    Message($"You can't turn on the {Label($item)}. You need to light it with something.");
}
function IgniteCandle($item:Item)
{
    if ($item.LightState != LightState.Lit)
    {
        $item.LightState = LightState.Lit;
        Message($"The {Label($item)} is now lit.");
    }
    else
    {
        Message($"The {Label($item)} is already lit.");
    }
}
function PutOutCandle($item:Item)
{
    if ($item.LightState == LightState.Lit)
    {
        $item.LightState = LightState.Unlit;
        Message($"The {Label($item)} is now out.");
    }
    else
    {
        Message($"The {Label($item)} is already out.");
    }
}
function InitializeCandle($item:Item, $adjectives:String, $noun:String, $loc:Item)
{
    SetLabelProperties($item, $adjectives, $noun);
    SetPortable($item);
    $item.LightState = LightState.Unlit;
    $item.TurnOnAction = TurnOnCandle;
    $item.IgniteAction = IgniteCandle;
    $item.TurnOffAction = PutOutCandle;
    $item.PutOutAction = PutOutCandle;
    $item.Location = $loc;
}
function NewCandle($adjectives:String, $noun:String, $loc:Item) : Item
{
    var $item = NewItem($"_{$noun}_{$loc}");
    InitializeCandle($item, $adjectives, $noun, $loc);
    $return = $item;
}
function IsCandle($item:Item) => $item.TurnOnAction == TurnOnCandle;
function IsDarkAtNight($item:Item) => $currentTime < 480 || $currentTime >= 1200;
function IsDarkAlways($item:Item) => true;
function UseLighterOn($item:Item, $target:Item)
{
    if ($target.IgniteAction != null)
    {
        $target.IgniteAction($target);
    }
    else
    {
        Message($"You cannot light the {Label($target)}.");
    }
}
function InitializeLighter($item:Item, $adjectives:String, $noun:String, $loc:Item)
{
    SetLabelProperties($item, $adjectives, $noun);
    SetPortable($item);
    $item.UseOnAction = UseLighterOn;
    $item.Location = $loc;
}
function NewLighter($adjectives:String, $noun:String, $loc:Item) : Item
{
    var $item = NewItem($"_{$noun}_{$loc}");
    InitializeLighter($item, $adjectives, $noun, $loc);
    $return = $item;
}
function IsLighter($item:Item) => $item.UseOnAction == UseLighterOn;
function IsCurrentRoomOrInventory($loc:Item) => $loc == player.Location || $loc == player;
function IsAccessible($item:Item) : Bool
{
    if (!$item.IsHidden && $item.Noun != null)
    {
        var $loc = $item.Location;
        if (IsCurrentRoomOrInventory($loc))
        {
            $return = true;
        }
        elseif (IsOpenContainer($loc) && $loc.Location == player.Location)
        {
            $return = true;
        }
    }
}
map IsActiveLightState LightState -> Bool
{
    None -> false,
    Off -> false,
    On -> true,
    Unlit -> false,
    Lit -> true
}
function InitializeLighting()
{
    $currentLightSource = null;
    if (player.Location.IsDark(player.Location))
    {
        foreach (var $item)
        {
            if (IsActiveLightState($item.LightState) && IsAccessible($item))
            {
                $currentLightSource = $item;
            }
        }
        $isNowDark = $currentLightSource == null;
    }
    else
    {
        $isNowDark = false;
    }
}
function AddItemWords($item:Item)
{
    AddAdjectives($item.Adjectives, $item);
    AddNoun($item.Noun, $item);
}
function InitializeWordMap()
{
    if ($isNowDark)
    {
        foreach (var $item) where Location == player
        {
            AddItemWords($item);
        }
    }
    else
    {
        foreach (var $item)
        {
            if (IsAccessible($item))
            {
                AddItemWords($item);
            }
        }
        foreach (var $dir:Direction)
        {
            var $door = GetLink(player.Location, $dir);
            if ($door.DoorState != DoorState.None)
            {
                AddAdjectives($"{$dir}", $door);
                AddItemWords($door);
            }
        }
    }
}
function Look()
{
    var $room = player.Location;
    if ($isNowDark)
    {
        Message("You are in the dark.");
        foreach (var $dir:Direction)
        {
            var $door = GetLink($room, $dir);
            if ($door != null && !IsClosedOrLocked($door.DoorState))
            {
                var $linkedRoom = GetLink($door, $dir);
                if (!$linkedRoom.IsDark($linkedRoom))
                {
                    Message($"A faint light filters in from the {$door.Noun} {DirectionPhrase($dir)}.");
                }
            }
        }
    }
    else
    {
        if ($currentLightSource != null)
        {
            Message($"The {Label($currentLightSource)} illuminates the dark room.");
        }
        Describe($room);
        foreach (var $dir:Direction)
        {
            var $door = GetLink(player.Location, $dir);
            if ($door != null)
            {
                Message($"There is a {LabelWithState($door)} {DirectionPhrase($dir)}.");
            }
        }
        foreach (var $item) where Location == $room
        {
            if (!$item.IsHidden && $item.Noun != null)
            {
                Message($"There is a {LabelWithState($item)} here.");
            }
        }
    }
}
function Go($dir:Direction)
{
    var $source = player.Location;
    var $door = GetLink($source, $dir);
    if ($door == null)
    {
        Message($"You cannot go {$dir}.");
    }
    elseif (IsClosedOrLocked($door.DoorState))
    {
        Message($"The {Label($door)} is closed.");
    }
    else
    {
        var $dest = GetLink($door, $dir);
        if (!$source.LeaveAction($source, $dest) && !$dest.EnterAction($source, $dest))
        {
            player.Location = $dest;
            InitializeLighting();
            Look();
        }
    }
}
command "inventory"
{
    Inventory();
}
command "i"
{
    Inventory();
}
command "take {$item:Item}"
{
    Take($item);
}
command "drop {$item:Item}"
{
    Take($item);
}
command "use {$item:Item} on {$target:Item}"
{
    UseOn($item, $target);
}
command "use {$item:Item}"
{
    Use($item);
}
command "open {$item:Item}"
{
    Open($item);
}
command "close {$item:Item}"
{
    Close($item);
}
command "turn on {$item:Item}"
{
    TurnOn($item);
}
command "turn {$item:Item} on"
{
    TurnOn($item);
}
command "turn off {$item:Item}"
{
    TurnOff($item);
}
command "turn {$item:Item} off"
{
    TurnOff($item);
}
command "put out {$item:Item}"
{
    PutOut($item);
}
command "put {$item:Item} out"
{
    PutOut($item);
}
command "look at {$item:Item}"
{
    Describe($item);
}
command "look {$item:Item}"
{
    Describe($item);
}
command "put {$item:Item} in {$container:Item}"
{
    PutInContainer($item, $container);
}
command "light {$target:Item} with {$lighter:Item}"
{
    if (IsLighter($lighter))
    {
        UseLighterOn($lighter, $target);
    }
    else
    {
        Message($"The {Label($lighter)} has no effect.");
    }
}
command "look"
{
    Look();
}
command "go {$dir:Direction}"
{
    Go($dir);
}
command "n"
{
    Go(Direction.North);
}
command "s"
{
    Go(Direction.South);
}
command "e"
{
    Go(Direction.East);
}
command "w"
{
    Go(Direction.West);
}
command "up"
{
    Go(Direction.Up);
}
command "down"
{
    Go(Direction.Down);
}
game
{
    {
        var $_ = player;
        $_.Location = frontHall;
        $_.Health = 99;
        $_.MaxHealth = 99;
        $_.DescribeHealthAction = DescribePlayerHealth;
        $_.DestroyAction = DestroyPlayer;
    }
    {
        var $_ = frontPorch;
        $_.Description = "You are on a front porch.";
        $_.LinkN = _door_frontPorchfrontHall;
    }
    {
        var $_ = frontHall;
        $_.Description = "You are in a small entryway.";
        $_.LinkN = _opening_frontHallbackHall;
        $_.LinkS = _door_frontPorchfrontHall;
        $_.LinkE = _opening_livingRoomfrontHall;
    }
    {
        var $_ = backHall;
        $_.Description = "You are in a back hallway.";
        $_.LinkN = _door_backHalllaundryRoom;
        $_.LinkS = _opening_frontHallbackHall;
        $_.LinkE = _opening_backHallkitchen;
    }
    {
        var $_ = laundryRoom;
        $_.Description = "You are in a laundry room.";
        $_.LinkS = _door_backHalllaundryRoom;
    }
    {
        var $_ = kitchen;
        $_.Description = "You are in a kitchen.";
        $_.LinkE = _opening_kitchendiningRoom;
        $_.LinkW = _opening_backHallkitchen;
    }
    {
        var $_ = diningRoom;
        $_.Description = "You are in a dining room.";
        $_.LinkS = _opening_diningRoomlivingRoom;
        $_.LinkW = _opening_kitchendiningRoom;
    }
    {
        var $_ = livingRoom;
        $_.Description = "You are in a living room.";
        $_.LinkN = _opening_diningRoomlivingRoom;
        $_.LinkW = _opening_livingRoomfrontHall;
    }
    {
        var $_ = _door_frontPorchfrontHall;
        $_.Noun = "door";
        $_.Adjectives = "red";
        $_.OpenAction = OpenDoor;
        $_.CloseAction = CloseDoor;
        $_.LinkN = frontHall;
        $_.LinkS = frontPorch;
        $_.DoorState = DoorState.Locked;
        $_.Key = _key_laundryRoom;
    }
    {
        var $_ = _opening_frontHallbackHall;
        $_.Noun = "opening";
        $_.LinkN = backHall;
        $_.LinkS = frontHall;
    }
    {
        var $_ = _door_backHalllaundryRoom;
        $_.Noun = "door";
        $_.OpenAction = OpenDoor;
        $_.CloseAction = CloseDoor;
        $_.LinkN = laundryRoom;
        $_.LinkS = backHall;
        $_.DoorState = DoorState.Closed;
    }
    {
        var $_ = _opening_backHallkitchen;
        $_.Noun = "opening";
        $_.LinkE = kitchen;
        $_.LinkW = backHall;
    }
    {
        var $_ = _opening_kitchendiningRoom;
        $_.Noun = "opening";
        $_.LinkE = diningRoom;
        $_.LinkW = kitchen;
    }
    {
        var $_ = _opening_diningRoomlivingRoom;
        $_.Noun = "opening";
        $_.LinkN = diningRoom;
        $_.LinkS = livingRoom;
    }
    {
        var $_ = _opening_livingRoomfrontHall;
        $_.Noun = "opening";
        $_.LinkE = livingRoom;
        $_.LinkW = frontHall;
    }
    {
        var $_ = _key_laundryRoom;
        $_.Location = laundryRoom;
        $_.Noun = "key";
        $_.Adjectives = "brass";
        $_.TakeAction = TakePortableItem;
        $_.DropAction = DropPortableItem;
        $_.UseOnAction = UseKeyOn;
    }
}
turn
{
    if (player.Location == null)
    {
        Message("Error: player.Location has not been set.");
    }
    $currentTime = $currentTime < 1439 ? $currentTime + 1 : 0;
    if (player.Health < player.MaxHealth)
    {
        player.Health = player.Health + 1;
    }
    if (player.Location == null)
    {
        Message("Error: player.Location has not been set.");
    }
    else
    {
        InitializeLighting();
        InitializeWordMap();
    }
}
